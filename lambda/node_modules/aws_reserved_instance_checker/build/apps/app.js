"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var resourceType_1 = require("../providers/resourceType");
var App = (function () {
    function App(resourceProviders, reservedInstanceCalculator, slackHelper, excludePattern) {
        this.resourceProviders = resourceProviders;
        this.reservedInstanceCalculator = reservedInstanceCalculator;
        this.slackHelper = slackHelper;
        this.excludePattern = excludePattern;
    }
    App.prototype.Run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var slackMessage, excludedInstances, _loop_1, this_1, _i, _a, provider, slackAttachment;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        slackMessage = {
                            username: 'AWS Reserved Instance Status Check',
                            attachments: []
                        };
                        excludedInstances = [];
                        _loop_1 = function (provider) {
                            var reservedInstances, runningInstances, notReservedInstances, excludedInstancesForProvider, slackAttachment_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, provider.describeActiveReservedInstances()];
                                    case 1:
                                        reservedInstances = _a.sent();
                                        return [4, provider.describeRunningInstances()];
                                    case 2:
                                        runningInstances = _a.sent();
                                        notReservedInstances = this_1.reservedInstanceCalculator.getInstanceNotReserved(reservedInstances, runningInstances);
                                        excludedInstancesForProvider = [];
                                        notReservedInstances = notReservedInstances.filter(function (i) {
                                            if (!_this.excludePattern) {
                                                return true;
                                            }
                                            var regex = new RegExp(_this.excludePattern, "g");
                                            var matches = i.InstanceName.match(regex);
                                            if (matches && matches.length > 0) {
                                                excludedInstancesForProvider.push(i);
                                                return false;
                                            }
                                            return true;
                                        });
                                        excludedInstances = excludedInstances.concat(excludedInstancesForProvider);
                                        slackAttachment_1 = this_1.slackHelper.formatInstanceToSlackAttachment(provider.ResourceType, notReservedInstances);
                                        slackAttachment_1.footer = provider.getInstancesUrl(notReservedInstances);
                                        slackMessage.attachments.push(slackAttachment_1);
                                        return [2];
                                }
                            });
                        };
                        this_1 = this;
                        _i = 0, _a = this.resourceProviders;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 4];
                        provider = _a[_i];
                        return [5, _loop_1(provider)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4:
                        slackAttachment = this.slackHelper.formatInstanceToSlackAttachment(resourceType_1.ResourceType.Excluded, excludedInstances);
                        slackMessage.attachments.push(slackAttachment);
                        return [4, this.slackHelper.sendToSlack(slackMessage)];
                    case 5:
                        _b.sent();
                        return [2];
                }
            });
        });
    };
    return App;
}());
exports.default = App;
