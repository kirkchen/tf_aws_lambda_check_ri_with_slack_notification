"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var client_1 = require("@slack/client");
var resourceType_1 = require("../providers/resourceType");
require("../typings/slack");
require("../models/groupedInstanceData");
require("../models/instanceData");
var SlackHelper = (function () {
    function SlackHelper(region, webhookUrl, channel) {
        this.region = region;
        this.webhookUrl = webhookUrl;
        this.channel = channel;
    }
    SlackHelper.prototype.formatInstanceToSlackAttachment = function (resourceType, instances) {
        var resourceTypeString = resourceType_1.ResourceType[resourceType];
        if (instances.length === 0) {
            return {
                title: resourceTypeString + " instances are all in reserved instance list :tada::tada::tada:",
                color: "good",
                fields: []
            };
        }
        var groupedInstanceDatas = {};
        instances.forEach(function (instance) {
            var key = instance.GroupKey;
            if (!groupedInstanceDatas[key]) {
                groupedInstanceDatas[key] = [];
            }
            groupedInstanceDatas[key].push(instance);
        });
        var slaceMessageAttachment = {
            title: resourceTypeString + " instances not in reserved instance list",
            color: "warning",
            fields: []
        };
        var instanceIds = [];
        for (var key in groupedInstanceDatas) {
            var field = {
                title: key,
                value: groupedInstanceDatas[key].map(function (instance) { return instance.InstanceName; }).join(', '),
                short: true
            };
            slaceMessageAttachment.fields.push(field);
            if (field.value) {
                field.value.split(', ').forEach(function (value) {
                    instanceIds.push(value);
                });
            }
        }
        return slaceMessageAttachment;
    };
    SlackHelper.prototype.sendToSlack = function (message) {
        if (this.channel) {
            message.channel = this.channel;
        }
        var webhook = new client_1.IncomingWebhook(this.webhookUrl);
        return new Promise(function (resolve, reject) {
            webhook.send(message, function (err) {
                if (err) {
                    reject(err);
                }
                resolve();
            });
        });
    };
    return SlackHelper;
}());
exports.default = SlackHelper;
